<docs>
<doc name="T:PeterO.ColorValidator">

            <summary>Contains auxiliary methods for processing Uniform Resource
            Identifiers (URIs) and Internationalized Resource Identifiers
            (IRIs) under RFC3986 and RFC3987, respectively. In the following
            documentation, URIs and IRIs include URI references and IRI
            references, for convenience.
            <para>There are five components to a URI: scheme, authority, path,
            query, and fragment identifier. The generic syntax to these
            components is defined in RFC3986 and extended in RFC3987. According
            to RFC3986, different URI schemes can further restrict the syntax
            of the authority, path, and query component (see also RFC 7320).
            However, the syntax of fragment identifiers depends on the media
            type (also known as MIME type) of the resource a URI references
            (see also RFC 3986 and RFC 7320). As of September 3, 2019, only the
            following media types specify a syntax for fragment
            identifiers:</para>
            <list>
            <item>The following application/* media types: epub + zip, pdf,
            senml + cbor, senml + json, senml-exi, sensml + cbor, sensml +
            json, sensml-exi, smil, vnd.3gpp-v2x-local-service-information,
            vnd.3gpp.mcdata-signalling, vnd.collection.doc + json, vnd.hc +
            json, vnd.hyper + json, vnd.hyper-item + json, vnd.mason + json,
            vnd.microsoft.portable-executable, vnd.oma.bcast.sgdu,
            vnd.shootproof + json</item>
            <item>The following image/* media types: avci, avcs, heic,
            heic-sequence, heif, heif-sequence, hej2k, hsj2, jxra, jxrs, jxsi,
            jxss</item>
            <item>The XML media types: application/xml,
            application/xml-external-parsed-entity, text/xml,
            text/xml-external-parsed-entity, application/xml-dtd</item>
            <item>All media types with subtypes ending in "+xml" (see RFC 7303)
            use XPointer Framework syntax as fragment identifiers, except the
            following application/* media types: dicom + xml (syntax not
            defined), senml + xml (own syntax), sensml + xml (own syntax), ttml
            + xml (own syntax), xliff + xml (own syntax), yang-data + xml
            (syntax not defined)</item>
            <item>font/collection</item>
            <item>multipart/x-mixed-replace</item>
            <item>text/plain</item>
            <item>text/csv</item>
            <item>text/html</item>
            <item>text/markdown</item>
            <item>text/vnd.a</item></list></summary>

</doc>
<doc name="M:PeterO.ColorValidator.BuildIRI(System.String,System.String,System.String,System.String)">
<summary>Builds an internationalized resource identifier (IRI) from its components.
    </summary>
    <param name='schemeAndAuthority'>String representing a scheme component, an authority component, or both.
      Examples of this parameter include "example://example", "example:", and
      "//example", but not "example". Can be null or empty.
    </param>
    <param name='path'>A string representing a path component. Can be null or empty.
    </param>
    <param name='query'>The query string. Can be null or empty.
    </param>
    <param name='fragment'>The fragment identifier. Can be null or empty.
    </param>
    <returns>A URI built from the given components.
    </returns>
    <exception cref='ArgumentException'>Invalid schemeAndAuthority parameter, or the arguments result in an
      invalid IRI.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.ColorToRgba(System.String)">

            <summary>Converts an HTML or CSS color string to a 4-element RGB
            array.</summary>
            <param name='x'>A string which names a color. The following lists
            the kinds of colors accepted:
            <list>
            <item>HTML colors with the syntax <c>#RRGGBB</c>, where RR is the
            hexadecimal form of the red component (00-FF), GG is the
            hexadecimal green component, and BB is the hexadecimal blue
            component. Example: #88DFE0.</item>
            <item>HTML colors with the syntax <c>#RGB</c>, where R is the
            hexadecimal form of the red component (0-F), G is the hexadecimal
            green component, and B is the hexadecimal blue component. Example:
            #8DE.</item>
            <item>CSS colors with the syntax <c>rgb(red, green, blue)</c> or
            <c>rgba(red, green, blue, alpha)</c> where <c>red</c>,
            <c>green</c>, and <c>blue</c> are the red, green, and blue
            components, respectively, either as a number (0-255) or as a
            percent, and <c>alpha</c> is a number from 0-1 specifying the alpha
            component. Examples: <c>rgb(255, 0, 0)</c>, <c>rgb(100%, 50%,
            0%)</c>, <c>rgba(20, 255, 255, 0.5)</c>.</item>
            <item>CSS colors with the syntax <c>hsl(hue, sat, light)</c> or
            <c>hsla(hue, sat, light, alpha)</c> where <c>hue</c> is the hue
            component in degrees (0-360), <c>sat</c> and <c>light</c> are the
            saturation and lightness components, respectively, as percents, and
            <c>alpha</c> is a number from 0-1 specifying the alpha component.
            Examples: <c>rgb(255, 0, 0)</c>, <c>hsl(200, 50%, 50%)</c>,
            <c>hsla(20, 80%, 90%, 0.5)</c>.</item>
            <item>CSS colors such as <c>red</c>, <c>green</c>, <c>white</c>,
            <c>lemonchiffon</c>, <c>chocolate</c>, and so on, including the
            newly added <c>rebeccapurple</c>.</item>
            <item>The value <c>transparent</c>, meaning transparent
            black.</item></list>
            <para>For more information:
            https://peteroupc.github.io/html3dutil/tutorial-colors.html.</para>
            .</param>
            <returns>An array containing four elements, with the red, green,
            blue, and alpha components of the same color, each from 0 to 255.
            Returns null if <paramref name='x'/> is null, empty, or has invalid
            syntax.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.Dehexchar(System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='c'>The parameter <paramref name='c'/> is a 32-bit
            signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.DirectoryPath(System.String)">
<summary>Extracts the scheme, the authority, and the path component (up to and
      including the last "/" in the path if any) from the given URI or IRI,
      using the IRIStrict parse mode to check the URI or IRI. Any "./" or "../"
      in the path is not condensed.
    </summary>
    <param name='uref'>A text string representing a URI or IRI. Can be null.
    </param>
    <returns>The directory path of the URI or IRI. Returns null if
      <paramref name='uref'/>
       is null or not a valid URI or IRI.
    </returns>
    <exception cref='ArgumentNullException'>The parameter
      <paramref name='uref'/>
       is null.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.DirectoryPath(System.String,PeterO.ColorValidator.ParseMode)">
<summary>Extracts the scheme, the authority, and the path component (up to and
      including the last "/" in the path if any) from the given URI or IRI,
      using the given parse mode to check the URI or IRI. Any "./" or "../" in
      the path is not condensed.
    </summary>
    <param name='uref'>A text string representing a URI or IRI. Can be null.
    </param>
    <param name='parseMode'>The parse mode to use to check the URI or IRI.
    </param>
    <returns>The directory path of the URI or IRI. Returns null if
      <paramref name='uref'/>
       is null or not a valid URI or IRI.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.EncodeStringForURI(System.String)">
<summary>Encodes characters other than "unreserved" characters for URIs.
    </summary>
    <param name='s'>A string to encode.
    </param>
    <returns>The encoded string.
    </returns>
    <exception cref='ArgumentNullException'>The parameter
      <paramref name='s'/>
       is null.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.EscapeURI(System.String,System.Int32)">
<summary>Escapes characters that can't appear in URIs or IRIs. The function is
      idempotent; that is, calling the function again on the result with the
      same mode doesn't change the result.
    </summary>
    <param name='s'>A string to escape.
    </param>
    <param name='mode'>Has the following meaning: 0 = Encode reserved code points, code points
      below U+0021, code points above U+007E, and square brackets within the
      authority component, and do the IRISurrogateLenient check. 1 = Encode code
      points above U+007E, and square brackets within the authority component,
      and do the IRIStrict check. 2 = Same as 1, except the check is
      IRISurrogateLenient. 3 = Same as 0, except that percent characters that
      begin illegal percent-encoding are also encoded.
    </param>
    <returns>A string possibly containing escaped characters, or null if s is null.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.HasScheme(System.String)">
<summary>Determines whether the string is a valid IRI with a scheme component.
      This can be used to check for relative IRI references.
      <para>The following cases return true:
      </para>
      <code>xx-x:mm example:/ww</code> The following cases return false:
      <code>x@y:/z /x/y/z example.xyz</code> .
    </summary>
    <param name='refValue'>A string representing an IRI to check.
    </param>
    <returns><c>true</c> if the string is a valid IRI with a scheme component; otherwise, <c>false</c> .
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.HasSchemeForURI(System.String)">
<summary>Determines whether the string is a valid URI with a scheme component.
      This can be used to check for relative URI references. The following cases
      return true:
      <code>http://example/z xx-x:mm example:/ww</code> The following cases return false:
      <code>x@y:/z /x/y/z example.xyz</code> .
    </summary>
    <param name='refValue'>A string representing an IRI to check.
    </param>
    <returns><c>true</c> if the string is a valid URI with a scheme component; otherwise, <c>false</c> .
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.HlsToRgb(System.Double,System.Double,System.Double)">

            <summary>Converts a color in the HLS color space to red/green/blue.
            Hue can range from 0 to 360, and lightness and saturation can range
            from 0 to 255. If lightness and saturation are out of range, those
            values are clamped to fit that range.</summary>
            <param name='hueval'>The parameter <paramref name='hueval'/> is a
            64-bit floating-point number.</param>
            <param name='lum'>The parameter <paramref name='lum'/> is a 64-bit
            floating-point number.</param>
            <param name='sat'>The parameter <paramref name='sat'/> is a 64-bit
            floating-point number.</param>
            <returns>An array containing three elements, with the red, green,
            and blue components of the same color, each from 0 to
            255.</returns>
            <exception cref='ArgumentNullException'>The parameter "hls" is
            null.</exception>

</doc>
<doc name="M:PeterO.ColorValidator.Hsl(System.String,System.Int32,System.Int32,System.Double[])">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>A 64-bit floating-point number.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.Hsla(System.String,System.Int32,System.Int32,System.Double[])">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>A 64-bit floating-point number.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.IsValidCurieReference(System.String,System.Int32,System.Int32)">
<summary>Determines whether the substring is a valid CURIE reference under RDFA
      1.1. (The CURIE reference is the part after the colon.).
    </summary>
    <param name='s'>A string containing a CURIE reference. Can be null.
    </param>
    <param name='offset'>A Index starting at 0 showing where the desired portion of "s" begins.
    </param>
    <param name='length'>The number of elements in the desired portion of "s" (but not more than
      "s" 's length).
    </param>
    <returns><c>true</c> if the substring is a valid CURIE reference under RDFA 1; otherwise, <c>false</c> . Returns false if
      <paramref name='s'/>
       is null.
    </returns>
    <exception cref='ArgumentException'>Either
      <paramref name='offset'/>
       or
      <paramref name='length'/>
       is less than 0 or greater than
      <paramref name='s'/>
       's length, or
      <paramref name='s'/>
       ' s length minus
      <paramref name='offset'/>
       is less than
      <paramref name='length'/>
      .
    </exception>
    <exception cref='ArgumentNullException'>The parameter
      <paramref name='s'/>
       is null.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.IsValidIRI(System.String)">
<summary>Returns whether a string is a valid IRI according to the IRIStrict parse
      mode.
    </summary>
    <param name='s'>A text string. Can be null.
    </param>
    <returns><c>true</c> if the string is not null and is a valid IRI; otherwise, <c>false</c>.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.IsValidIRI(System.String,PeterO.ColorValidator.ParseMode)">
<summary>Returns whether a string is a valid IRI according to the given parse mode.
    </summary>
    <param name='s'>A text string. Can be null.
    </param>
    <param name='mode'>The parse mode to use when checking for a valid IRI.
    </param>
    <returns><c>true</c> if the string is not null and is a valid IRI; otherwise, <c>false</c>.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.ParseByte(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.ParseComma(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.ParseEndparen(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.ParseHue(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.ParseInteger(System.String,System.Int32,System.Int32,System.Boolean)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='posneg'>The parameter <paramref name='posneg'/> is
            either <c>true</c> or <c>false</c>.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="T:PeterO.ColorValidator.ParseMode">
<summary>Specifies whether certain characters are allowed when parsing IRIs and
      URIs.
    </summary>
</doc>
<doc name="F:PeterO.ColorValidator.ParseMode.IRILenient">
<summary>The rules only check for the appropriate delimiters when splitting the
      path, without checking if all the characters in each component are valid.
      Even with this mode, strings with unpaired surrogate code points are
      considered invalid.
    </summary>
</doc>
<doc name="F:PeterO.ColorValidator.ParseMode.IRIStrict">
<summary>The rules follow the syntax for parsing IRIs. In particular, many code
      points outside the Basic Latin range (U+0000 to U+007F) are allowed.
      Strings with unpaired surrogate code points are considered invalid.
    </summary>
</doc>
<doc name="F:PeterO.ColorValidator.ParseMode.IRISurrogateLenient">
<summary>The rules only check for the appropriate delimiters when splitting the
      path, without checking if all the characters in each component are valid.
      Unpaired surrogate code points are treated as though they were replacement
      characters instead for the purposes of these rules, so that strings with
      those code points are not considered invalid strings.
    </summary>
</doc>
<doc name="F:PeterO.ColorValidator.ParseMode.URILenient">
<summary>The rules only check for the appropriate delimiters when splitting the
      path, without checking if all the characters in each component are valid.
      Code points outside the Basic Latin range (U+0000 to U+007F) are not
      allowed.
    </summary>
</doc>
<doc name="F:PeterO.ColorValidator.ParseMode.URIStrict">
<summary>The rules follow the syntax for parsing IRIs, except that code points
      outside the Basic Latin range (U+0000 to U+007F) are not allowed.
    </summary>
</doc>
<doc name="M:PeterO.ColorValidator.ParseNumber(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.Pct(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.PercentDecode(System.String)">
<summary>Decodes percent-encoding (of the form "%XX" where X is a hexadecimal (base-16) digit) in the given string. Successive percent-encoded bytes are assumed
      to form characters in UTF-8.
    </summary>
    <param name='str'>A string that may contain percent encoding. May be null.
    </param>
    <returns>The string in which percent-encoding was decoded.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.PercentDecode(System.String,System.Int32,System.Int32)">
<summary>Decodes percent-encoding (of the form "%XX" where X is a hexadecimal (base-16) digit) in the given portion of a string. Successive percent-encoded bytes
      are assumed to form characters in UTF-8.
    </summary>
    <param name='str'>A string a portion of which may contain percent encoding. May be null.
    </param>
    <param name='index'>Index starting at 0 showing where the desired portion of
      <paramref name='str'/>
       begins.
    </param>
    <param name='endIndex'>Index starting at 0 showing where the desired portion of
      <paramref name='str'/>
       ends. The character before this index is the last character.
    </param>
    <returns>The portion of the given string in which percent-encoding was decoded.
      Returns null if
      <paramref name='str'/>
       is ull.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.RelativeResolve(System.String,System.String)">
<summary>Resolves a URI or IRI relative to another URI or IRI.
    </summary>
    <param name='refValue'>A string representing a URI or IRI reference. Example:
      <c>dir/file.txt</c> .
    </param>
    <param name='absoluteBase'>A string representing an absolute URI or IRI reference. Can be null.
      Example:
      <c>http://example.com/my/path/</c> .
    </param>
    <returns>The resolved IRI, or null if
      <paramref name='refValue'/>
       is null or is not a valid IRI. If
      <paramref name='absoluteBase'/>
       is null or is not a valid IRI, returns refValue. Example:
      <c>http://example.com/my/path/dir/file.txt</c> .
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.RelativeResolve(System.String,System.String,PeterO.ColorValidator.ParseMode)">
<summary>Resolves a URI or IRI relative to another URI or IRI.
    </summary>
    <param name='refValue'>A string representing a URI or IRI reference. Example:
      <c>dir/file.txt</c> . Can be null.
    </param>
    <param name='absoluteBase'>A string representing an absolute URI or IRI reference. Can be null.
      Example:
      <c>http://example.com/my/path/</c> .
    </param>
    <param name='parseMode'>Parse mode that specifies whether certain characters are allowed when
      parsing IRIs and URIs.
    </param>
    <returns>The resolved IRI, or null if
      <paramref name='refValue'/>
       is null or is not a valid IRI. If
      <paramref name='absoluteBase'/>
       is null or is not a valid IRI, returns refValue.
    </returns>
    <exception cref='ArgumentNullException'>The parameter
      <paramref name='refValue'/>
       or
      <paramref name='absoluteBase'/>
       or
      <paramref name='refValue'/>
       or
      <paramref name='refValue'/>
       is null.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.RelativeResolveWithinBaseURI(System.String,System.String)">
<summary>Resolves a URI or IRI relative to another URI or IRI, but only if the
      resolved URI has no "." or ".." component in its path and only if resolved
      URI's directory path matches that of the second URI or IRI.
    </summary>
    <param name='refValue'>A string representing a URI or IRI reference. Example:
      <c>dir/file.txt</c> .
    </param>
    <param name='absoluteBase'>A string representing an absolute URI reference. Example:
      <c>http://example.com/my/path/</c> .
    </param>
    <returns>The resolved IRI, or null if
      <paramref name='refValue'/>
       is null or is not a valid IRI, or
      <paramref name='refValue'/>
       if
      <paramref name='absoluteBase'/>
       is null or an empty string, or null if
      <paramref name='absoluteBase'/>
       is neither null nor empty and is not a valid IRI. Returns null instead if
      the resolved IRI has no "." or ".." component in its path or if the
      resolved URI's directory path does not match that of
      <paramref name='absoluteBase'/>
      . Example:
      <c>http://example.com/my/path/dir/file.txt</c> .
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.Rgb(System.String,System.Int32,System.Int32,System.Double[])">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='result'>The parameter <paramref name='result'/> is a
            Double[] object.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.RgbHex(System.String,System.Double[],System.Boolean)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='hexval'>The parameter <paramref name='hexval'/> is a
            Double[] object.</param>
            <param name='hash'>The parameter <paramref name='hash'/> is either
            <c>true</c> or <c>false</c>.</param>
            <returns>Either <c>true</c> or <c>false</c>.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.RgbToColor(System.Double[])">

            <summary>Converts an RGBA color to a string, either rgb(...) or
            rgba(...) as applicable.</summary>
            <param name='arrayRGB'>A 3- or 4-item array containing the
            intensity of red, green, and blue (each from 0-255), with optional
            alpha (0-255).</param>
            <returns>A text string.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='arrayRGB'/> is null.</exception>

</doc>
<doc name="M:PeterO.ColorValidator.RgbToColorDisplay(System.Double[])">

            <summary>Converts a red&#x2013;green&#x2013;blue-alpha color to a string in CSS
            format.</summary>
            <param name='rgb'>An array containing three or four elements, with
            the red, green, blue, and alpha components of the color, each from
            0 to 255. Each element's value is adjusted to 0 if it's less than 0
            and to 255 if it's greater than 255 (the array itself is not
            modified, though).</param>
            <returns>A string in HTML color format: "#RRGGBB", if there are
            three elements or the fourth value in the array is 255, or a string
            in the RGBA color format otherwise.</returns>
            <exception cref='ArgumentException'>The parameter <paramref name='rgb'/> is null or contains fewer than three
            elements.</exception>
            <exception cref='ArgumentNullException'>The parameter <paramref name='rgb'/> is null.</exception>

</doc>
<doc name="M:PeterO.ColorValidator.RgbToColorHtml(System.Double[])">

            <summary>Converts an RGBA color to an HTML color, (ex.
            #002233).&#x22;rgb&#x22; must contain at least 3 elements: the red,
            green, and blue (each 0-255).</summary>
            <param name='rgb'>A double[] object.</param>
            <returns>A text string.</returns>
            <exception cref='ArgumentNullException'>The parameter <paramref name='rgb'/> is null.</exception>

</doc>
<doc name="M:PeterO.ColorValidator.Rgba(System.String,System.Int32,System.Int32,System.Double[])">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='result'>A 64-bit floating-point number.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.SepAlpha(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.SepByte(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.SepPct(System.String,System.Int32,System.Int32,System.Double[],System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <param name='ret'>The parameter <paramref name='ret'/> is a
            Double[] object.</param>
            <param name='retIndex'>The parameter <paramref name='retIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.SkipWhite(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.SplitIRI(System.String)">
<summary>Parses an Internationalized Resource Identifier (IRI) reference under
      RFC3987. If the IRI reference is syntactically valid, splits the string
      into its components and returns an array containing the indices into the
      components.
    </summary>
    <param name='s'>A string that contains an IRI. Can be null.
    </param>
    <returns>If the string is a valid IRI reference, returns an array of 10 integers.
      Each of the five pairs corresponds to the start and end index of the IRI's
      scheme, authority, path, query, or fragment identifier, respectively. The
      scheme, authority, query, and fragment identifier, if present, will each
      be given without the ending colon, the starting "//", the starting "?",
      and the starting "#", respectively. If a component is absent, both indices
      in that pair will be -1. If the string is null or is not a valid IRI,
      returns null.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.SplitIRI(System.String,PeterO.ColorValidator.ParseMode)">
<summary>Parses an Internationalized Resource Identifier (IRI) reference under
      RFC3987. If the IRI is syntactically valid, splits the string into its
      components and returns an array containing the indices into the
      components.
    </summary>
    <param name='s'>A string representing an IRI. Can be null.
    </param>
    <param name='parseMode'>The parameter
      <paramref name='parseMode'/>
       is a ParseMode object.
    </param>
    <returns>If the string is a valid IRI reference, returns an array of 10 integers.
      Each of the five pairs corresponds to the start and end index of the IRI's
      scheme, authority, path, query, or fragment identifier, respectively. The
      scheme, authority, query, and fragment identifier, if present, will each
      be given without the ending colon, the starting "//", the starting "?",
      and the starting "#", respectively. If a component is absent, both indices
      in that pair will be -1. If the string is null or is not a valid IRI,
      returns null.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.SplitIRI(System.String,System.Int32,System.Int32,PeterO.ColorValidator.ParseMode)">
<summary>Parses a substring that represents an Internationalized Resource
      Identifier (IRI) under RFC3987. If the IRI is syntactically valid, splits
      the string into its components and returns an array containing the indices
      into the components.
    </summary>
    <param name='s'>A string that contains an IRI. Can be null.
    </param>
    <param name='offset'>A Index starting at 0 showing where the desired portion of "s" begins.
    </param>
    <param name='length'>The length of the desired portion of "s" (but not more than "s" 's
      length).
    </param>
    <param name='parseMode'>Parse mode that specifies whether certain characters are allowed when
      parsing IRIs and URIs.
    </param>
    <returns>If the string is a valid IRI, returns an array of 10 integers. Each of the
      five pairs corresponds to the start and end index of the IRI's scheme,
      authority, path, query, or fragment component, respectively. The scheme,
      authority, query, and fragment components, if present, will each be given
      without the ending colon, the starting "//", the starting "?", and the
      starting "#", respectively. If a component is absent, both indices in that
      pair will be -1 (an index won't be less than 0 in any other case). If the
      string is null or is not a valid IRI, returns null.
    </returns>
    <exception cref='ArgumentException'>Either
      <paramref name='offset'/>
       or
      <paramref name='length'/>
       is less than 0 or greater than
      <paramref name='s'/>
       's length, or
      <paramref name='s'/>
       ' s length minus
      <paramref name='offset'/>
       is less than
      <paramref name='length'/>
      .
    </exception>
    <exception cref='ArgumentNullException'>The parameter
      <paramref name='s'/>
       is null.
    </exception>
</doc>
<doc name="M:PeterO.ColorValidator.SplitIRIToStrings(System.String)">
<summary>Parses an Internationalized Resource Identifier (IRI) reference under
      RFC3987. If the IRI reference is syntactically valid, splits the string
      into its components and returns an array containing those components.
    </summary>
    <param name='s'>A string that contains an IRI. Can be null.
    </param>
    <returns>If the string is a valid IRI reference, returns an array of five strings.
      Each of the five pairs corresponds to the IRI's scheme, authority, path,
      query, or fragment identifier, respectively. If a component is absent, the
      corresponding element will be null. If the string is null or is not a
      valid IRI, returns null.
    </returns>
</doc>
<doc name="M:PeterO.ColorValidator.StringToAlpha(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 64-bit floating-point number.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.StringToByte(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 64-bit floating-point number.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.StringToHue(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 64-bit floating-point number.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.StringToNumber(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 64-bit floating-point number.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.StringToPercent(System.String,System.Int32,System.Int32)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <param name='index'>The parameter <paramref name='index'/> is a
            32-bit signed integer.</param>
            <param name='endIndex'>The parameter <paramref name='endIndex'/> is
            a 32-bit signed integer.</param>
            <returns>A 64-bit floating-point number.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.ToLowerCaseAscii(System.String)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <returns>A text string.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.TrimAsciiWhite(System.String)">

            <summary>Not documented yet.</summary>
            <param name='str'>The parameter <paramref name='str'/> is a text
            string.</param>
            <returns>A text string.</returns>

</doc>
<doc name="M:PeterO.ColorValidator.dehexchar(System.Int32)">
<summary>Not documented yet.</summary>
            <param name='c'>The parameter <paramref name='c'/> is a 32-bit signed integer.</param>
            <returns>A 32-bit signed integer.</returns>
</doc>
<doc name="F:PeterO.ColorValidator.valueHexArray">

            <summary>Not documented yet.</summary>

</doc>
</docs>
